name: Deploy to CH2.0 environment X

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        required: true
        options:
          - DEV
          - QA
          - SIT
          - UAT
          - CAP
          - PRD

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: #ubuntu-latest
      group: gps-github-test-runners
    timeout-minutes: 25
    environment: ${{ github.event.inputs.environment }}  
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 17

      - name: Create release
        if: ${{ github.event.inputs.environment == 'QA' }}
        run: |
          mvn versions:set -DremoveSnapshot versions:commit
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
      
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      
          branch="release/$version"
          git checkout -b "$branch"
      
          git add pom.xml
          git commit -m "Create release $version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "$branch"
      
          pr_url=$(gh pr create \
            --title "Release $version" \
            --body "Automated release PR for $version" \
            --head "$branch" \
            --base dev \
            --repo "${{ github.repository }}" | grep 'https://github.com/' | head -1)
      
          gh pr merge "$pr_url" \
            --squash \
            --auto \
            --delete-branch \
            --repo "${{ github.repository }}"
      
          echo "⏳ Esperando merge..."
          while gh pr view "$pr_url" --json merged --jq .merged | grep false; do
            sleep 5
          done
      
          git fetch origin dev
          git checkout dev
          git pull origin dev
      
          git tag "$version"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "$version"
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build with Maven
        run: |
          branch_name=$(git symbolic-ref --short -q HEAD || true)
          if [ -n "$branch_name" ]; then
            git pull
          fi

          mvn -B package --settings .maven/settings.xml --file pom.xml -DskipMunitTests \
          -Dconnected_app_client_id=${{ secrets.connected_app_client_id }} \
          -Dconnected_app_client_secret=${{ secrets.connected_app_client_secret }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts
          path: target/*.jar
  
  deploy:
    needs: build
    runs-on: #ubuntu-latest
      group: gps-github-test-runners
    timeout-minutes: 15
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 17
      - name: Build GitHub Property Args from pom.xml (vars only)
        id: generate_args
        run: |
          ARG_STRING=""
          echo "Reading values from GitHub vars"
          
          # Serialize GitHub vars to JSON from the context
          VARS_JSON='${{ toJson(vars) }}'
          
          while IFS= read -r line; do
            var_ref=$(echo "$line" | sed -n 's:.*<app\..*>\${\(.*\)}</app\..*>.*:\1:p')
            if [[ -n "$var_ref" ]]; then
              val=$(echo "$VARS_JSON" | jq -r --arg v "$var_ref" '.[$v]')
              if [[ "$val" != "null" && -n "$val" ]]; then
                ARG_STRING="$ARG_STRING -D${var_ref}=${val}"
              else
                echo "⚠️ Warning: GitHub var '$var_ref' not set!"
              fi
            fi
          done < <(grep -o '<app\.[^>]*>.*</app\.[^>]*>' pom.xml)
          
          echo "Generated ARG_STRING: $ARG_STRING"
          echo "ARG_STRING=$ARG_STRING" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Deploy to CH2.0
        uses: ./.github/actions
        with:
          targetEnvironment: ${{ github.event.inputs.environment }}
          muleKey: ${{ secrets.mule_key }}
          connectedAppClientId: ${{ secrets.connected_app_client_id }}
          connectedAppClientSecret: ${{ secrets.connected_app_client_secret }}
          clientId: ${{ secrets.anypoint_client_id }}
          clientSecret: ${{ secrets.anypoint_client_secret }}
          target: ${{ vars.target }} 
          releaseChannel: ${{ vars.release_channel }} 
          wireLogging: ${{ vars.wire_logging_log_level }}
          replicas: ${{ vars.replicas }}
          vcores: ${{ vars.vcores }}
          extraArgs: ${{ steps.generate_args.outputs.ARG_STRING }}

      - name: Set next development cycle
        if: ${{ github.event.inputs.environment == 'QA' }}
        run: |
          mvn versions:set -DnextSnapshot versions:commit
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          git checkout dev
          git add pom.xml
          git commit -m "Increase version to $version for next development cycle"
          git push https://x-access-token:$githubToken@github.com/${{ github.repository }}.git dev
        shell: bash
        env:
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge to Main 
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event.inputs.environment == 'CHANGE_TO_PRD_WHEN_ENABLED' }}
        run: |
          SOURCE_TAG=${{ github.ref_name }}
          TEMP_BRANCH="release-from-tag-${SOURCE_TAG//\//-}"

          echo "Creating temp branch '$TEMP_BRANCH' from tag '$SOURCE_TAG'..."
          git fetch origin tag "$SOURCE_TAG"
          git checkout -b "$TEMP_BRANCH" "refs/tags/$SOURCE_TAG"
          git push origin "$TEMP_BRANCH"

          echo "Creating PR from '$TEMP_BRANCH' into main..."
          gh pr create \
            --title "Release: Merge $SOURCE_TAG into main" \
            --body "Automated PR to merge release from tag $SOURCE_TAG into main." \
            --base main \
            --head "$TEMP_BRANCH"

          PR_NUMBER=$(gh pr list --base main --head "$TEMP_BRANCH" --json number --jq '.[0].number')
          echo "PR #$PR_NUMBER created from tag '$SOURCE_TAG'."
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
